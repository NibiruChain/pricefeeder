// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NibiruChain/pricefeeder/types (interfaces: EventStream)

// Package mock_types is a generated GoMock package.
package mock_types

import (
	reflect "reflect"

	types "github.com/NibiruChain/pricefeeder/types"
	gomock "github.com/golang/mock/gomock"
)

// MockEventStream is a mock of EventStream interface.
type MockEventStream struct {
	ctrl     *gomock.Controller
	recorder *MockEventStreamMockRecorder
}

// MockEventStreamMockRecorder is the mock recorder for MockEventStream.
type MockEventStreamMockRecorder struct {
	mock *MockEventStream
}

// NewMockEventStream creates a new mock instance.
func NewMockEventStream(ctrl *gomock.Controller) *MockEventStream {
	mock := &MockEventStream{ctrl: ctrl}
	mock.recorder = &MockEventStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStream) EXPECT() *MockEventStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEventStream) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockEventStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventStream)(nil).Close))
}

// ParamsUpdate mocks base method.
func (m *MockEventStream) ParamsUpdate() <-chan types.Params {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParamsUpdate")
	ret0, _ := ret[0].(<-chan types.Params)
	return ret0
}

// ParamsUpdate indicates an expected call of ParamsUpdate.
func (mr *MockEventStreamMockRecorder) ParamsUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamsUpdate", reflect.TypeOf((*MockEventStream)(nil).ParamsUpdate))
}

// VotingPeriodStarted mocks base method.
func (m *MockEventStream) VotingPeriodStarted() <-chan types.VotingPeriod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VotingPeriodStarted")
	ret0, _ := ret[0].(<-chan types.VotingPeriod)
	return ret0
}

// VotingPeriodStarted indicates an expected call of VotingPeriodStarted.
func (mr *MockEventStreamMockRecorder) VotingPeriodStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VotingPeriodStarted", reflect.TypeOf((*MockEventStream)(nil).VotingPeriodStarted))
}
